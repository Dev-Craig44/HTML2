body {
  margin: 10px;
}

.container {
  border: 2px solid lightgrey;
  /* 1.) To lay out the boxes in a row we can use flexbox */
  display: flex;
  flex-direction: row;
  /* 2.) Set justify-content */
  justify-content: center;
  /* 3.) Set align-items */
  /* This won't do anything because the container is not tall enough, it's only as tall as the boxes */
  align-items: center;
  /* 4.) Set the height to 90vh */
  height: 90vh;
  /* 5.) Because everything wants to fit on one line our boxes get smaller as we add more boxes. To fix this we can use flex-wrap */
  /* flex-wrap: wrap; */
  /* 6.) Here's where content alignment comes into play */
  /* align-content: center; */
}

.box {
  /* 8.) Set the flex basis property, by default it is auto, which is going to look at the width of the content */
  /* If you change the flex-basis to a specific value, if we're in a row direction, the items will be that wide if we're in a column direction, the items will be that tall */
  flex-basis: 15rem;
  /* 9.) Use flex grow to all our boxes to take up available space */
  flex-grow: 1;
  /* 11.) Use flex shrink to allow the boxes to shrink if needed */
  flex-shrink: 1;
  /* 12.) We have this flex property which is the shorthand for flex-grow, flex-shrink, and flex-basis */
  flex: 1 1 15rem;
  width: 5rem;
  height: 5rem;
  background-color: gold;
  margin: 1rem;
}

.box-one {
  /* 7.) Lets align this box to the start of the cross axis */
  /* flex-basis: 5rem; */
  /* align-self: flex-start; */
  /* 10.) If we set flex-grow to 0, this box will not grow */
  /* flex-grow: 0; */
  /* 12.) If we set flex-shrink to 0, this box will not shrink */
  /* flex-shrink: 0; */
}
